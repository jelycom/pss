<?xml version="1.0" encoding="UTF-8"?>
<!-- Application context definition for PetClinic on Hibernate. -->
<beans xmlns="http://www.springframework.org/schema/beans" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xmlns:p="http://www.springframework.org/schema/p" xmlns:context="http://www.springframework.org/schema/context"
	xmlns:jee="http://www.springframework.org/schema/jee" xmlns:tx="http://www.springframework.org/schema/tx" xmlns:aop="http://www.springframework.org/schema/aop"
	xsi:schemaLocation="
			http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-3.0.xsd
			http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context-3.0.xsd
			http://www.springframework.org/schema/jee http://www.springframework.org/schema/jee/spring-jee-3.0.xsd
			http://www.springframework.org/schema/tx http://www.springframework.org/schema/tx/spring-tx-3.0.xsd
			http://www.springframework.org/schema/aop http://www.springframework.org/schema/aop/spring-aop-3.0.xsd"
	default-autowire="byName">
	<!-- 指定配置文件的路径并加载 -->
	<context:property-placeholder location="classpath:testjdbc.properties" />
	<!-- 设置Spring注解的扫描路径 -->
	<!-- <context:component-scan base-package="cn.jely.cd"/> -->

	<bean id="dataSource" class="org.apache.commons.dbcp.BasicDataSource" destroy-method="close" p:driverClassName="${jdbc.driverClassName}"
		p:url="${jdbc.url}" p:username="${jdbc.username}" p:password="${jdbc.password}" />

	<!-- JNDI DataSource for JEE environments -->
	<!-- <jee:jndi-lookup id="dataSource" jndi-name="java:comp/env/jdbc/petclinic"/> -->

	<!-- Hibernate SessionFactory -->
	<bean id="sessionFactory" class="org.springframework.orm.hibernate3.annotation.AnnotationSessionFactoryBean"
		p:dataSource-ref="dataSource">
		<property name="mappingLocations">
			<list>
				<value>classpath:/cn/jely/cd/domain/**/*.hbm.xml</value>
				<value>classpath:/cn/jely/cd/sys/domain/**/*.hbm.xml</value>
			</list>
		</property>
		<property name="hibernateProperties">
			<props>
				<prop key="hibernate.dialect">${hibernate.dialect}</prop>
				<prop key="hibernate.show_sql">${hibernate.show_sql}</prop>
				<prop key="hibernate.hbm2ddl.auto">${hibernate.hbm2ddl.auto}</prop>

				<prop key="hibernate.cache.use_second_level_cache">${hibernate.cache.use_second_level_cache}</prop>
				<prop key="hibernate.cache.provider_class">${hibernate.cache.provider_class}</prop>
				<prop key="hibernate.cache.use_query_cache">${hibernate.cache.use_query_cache}</prop>
			</props>
		</property>
		<!-- 放入二级缓存的实体 -->
		<property name="entityCacheStrategies">
			<value>
				<!-- cn.jely.cd.domain.Employee=read-write -->
			</value>
			<!-- <props> <prop key="cn.jely.cd.domain.Employee">read-write</prop> <prop key="">read-only,myRegion</prop> </props> -->
		</property>
	</bean>

	<!-- Transaction manager for a single Hibernate SessionFactory (alternative to JTA) -->
	<bean id="txManager" class="org.springframework.orm.hibernate3.HibernateTransactionManager"
		p:sessionFactory-ref="sessionFactory" />

	<bean id="ehcacheManager" class="org.springframework.cache.ehcache.EhCacheManagerFactoryBean">
		<property name="configLocation"  value="classpath:ehcache.xml">
		</property>
	</bean>
	<!-- 初始化系统设置参数 -->
	<bean class="cn.jely.cd.util.SysInitParamBean"></bean>
	<!-- Transaction manager that delegates to JTA (for a transactional JNDI DataSource) -->
	<!-- <bean id="txManager" class="org.springframework.transaction.jta.JtaTransactionManager"/> -->
	<!-- 配置事务的传播特性 -->
	<tx:advice id="myTrans" transaction-manager="txManager">
		<tx:attributes>
			<tx:method name="save*" propagation="REQUIRED" />
			<tx:method name="update*" propagation="REQUIRED" />
			<tx:method name="delete*" propagation="REQUIRED" />
			<tx:method name="do*" propagation="REQUIRED"/>
			<tx:method name="*" propagation="SUPPORTS" read-only="true"/>
		</tx:attributes>
	</tx:advice>
	<!-- 为Service提供事务操作 -->
	<aop:config>
		<aop:pointcut expression="execution (* cn.jely.cd..*Service.*(..))" id="transPC" />
		<aop:advisor advice-ref="myTrans" pointcut-ref="transPC" />
	</aop:config>

	<!-- <aop:config> <aop:pointcut expression="execution (* cn.jely.cd..*.*(..))" id="logPC"/> <aop:aspect ref="log类的名称"> <aop:before 
		method="log类的方法" pointcut-ref="logPC"/> </aop:aspect> </aop:config> -->
	<!-- ========================= BUSINESS OBJECT DEFINITIONS ========================= -->

	<!-- Activates various annotations to be detected in bean classes: Spring's @Required and @Autowired, as well as JSR 250's 
		@Resource. -->
	<context:annotation-config />

	<!-- Instruct Spring to perform declarative transaction management automatically on annotated classes. -->
	<tx:annotation-driven />
	<!-- =============== Dao ================== -->
	<import resource="classpath:spring/app-dao.xml" />
	<!-- =============== Service ================== -->
	<import resource="classpath:spring/app-service.xml" />
	<!-- =============== Action ================== -->
	<import resource="classpath:spring/app-action.xml" />
	<import resource="classpath:spring/timerjob.xml" />
	<import resource="classpath:spring/report-all.xml" />
</beans>
